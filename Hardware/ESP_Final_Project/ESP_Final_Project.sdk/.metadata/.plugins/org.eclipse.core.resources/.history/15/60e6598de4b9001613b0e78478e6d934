/**
*
* @file ece544_implementation.c
*
* @author Roy Kravitz (roy.kravitz@pdx.edu)
* @modified by Srivatsa Yogendra(srivatsa@pdx.edu)
* @copyright Portland State University, 2016
*
* This file implements a test program for the Nexys4IO and custom Pmod peripherals
* used in ECE 544. The peripherals provides access to the Nexys4 pushbuttons
* and slide switches, the LEDs, the RGB LEDs, and the Seven Segment display
* on the Digilent Nexys4 board and the PmodOLEDrgb (94 x 64 RGB graphics display) 
* and the PmodENC (rotary encoder + slide swich + pushbutton).
*
* The test is basic but covers all of the API functions:
*	o initialize the Nexys4IO and Pmod drivers
*	o Set the LED's to different values
*	o Check that the duty cycles can be set for both RGB LEDs
*	o Write character codes to the digits of the seven segment display banks
*	o Check that all of the switches and pushbuttons on the Nexys4 can be read
*	o Performs a basic test on the rotary encoder and pmodOLEDrgb
*
* <pre>
* MODIFICATION HISTORY:
*
* Ver   Who  Date     Changes
* ----- ---- -------- -----------------------------------------------
* 1.00a	rhk	02-Jul-2016		First release of test program.  Builds on the ece544 peripheral test used
*							to check the functionality of Nexys4IO adn PMod544IOR2
* 2.00  sy	22-Aug-2016		Modified the code and implemented the functionality of color wheel implementation
* 							and detection of the generated PWM for the RGB LED's
* </pre>
*
* @note
* The minimal hardware configuration for this test is a Microblaze-based system with at least 32KB of memory,
* an instance of Nexys4IO, an instance of the pmodOLEDrgb AXI slave peripheral, and instance of the pmodENC AXI
* slave peripheral and an instance of the AXI UARTLite (used for xil_printf() console output)
*
* @note
* The driver code and test application(s) for the pmodOLDrgb are based on code provided by Digilent, Inc.
*
*
* @note
* The Color wheel is implemented. The different colors can be selected by rotating the Rotary encoder connected on
* the JD port of the board. The color can be selected by the choosing the correct Hue, Saturation and Value values.
* The hue is set by the rotary encoder. The Saturation is set by BTNR and BTNL on the nexys4FPGA board. The Value is
* set by BTNU and BTND on the nexys4FPGA board. The duty cycle is calculated for the generated PWMs of Red , Blue
* and Green LEDs. The calculated duty cycle is displayed on the serial display monitor.

******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include "platform.h"
#include "xparameters.h"
#include "xstatus.h"
#include "microblaze_sleep.h"
#include "nexys4IO.h"
#include "pmodOLEDrgb.h"
#include "xintc.h"
#include "PmodBT2.h"
#include "xil_cache.h"
#include "DigiLED.h"


/************************** Constant Definitions ****************************/

// Clock frequencies
#define CPU_CLOCK_FREQ_HZ		XPAR_CPU_CORE_CLOCK_FREQ_HZ
#define AXI_CLOCK_FREQ_HZ		XPAR_CPU_M_AXI_DP_FREQ_HZ



// Definitions for peripheral NEXYS4IO
#define NX4IO_DEVICE_ID		XPAR_NEXYS4IO_0_DEVICE_ID
#define NX4IO_BASEADDR		XPAR_NEXYS4IO_0_S00_AXI_BASEADDR
#define NX4IO_HIGHADDR		XPAR_NEXYS4IO_0_S00_AXI_HIGHADDR

// Definitions for peripheral PMODOLEDRGB
#define RGBDSPLY_DEVICE_ID		XPAR_PMODOLEDRGB_0_DEVICE_ID
#define RGBDSPLY_GPIO_BASEADDR	XPAR_PMODOLEDRGB_0_AXI_LITE_GPIO_BASEADDR
#define RGBDSPLY_GPIO_HIGHADDR	XPAR_PMODOLEDRGB_0_AXI_LITE_GPIO_HIGHADD
#define RGBDSPLY_SPI_BASEADDR	XPAR_PMODOLEDRGB_0_AXI_LITE_SPI_BASEADDR
#define RGBDSPLY_SPI_HIGHADDR	XPAR_PMODOLEDRGB_0_AXI_LITE_SPI_HIGHADDR


// Interrupt Controller parameters
#define INTC_DEVICE_ID			XPAR_INTC_0_DEVICE_ID
#define INTC_PMODBT2_ID			XPAR_INTC_0_PMODBT2_0_VEC_ID

#define num_led 60
#define DELAY 100

char initialized = 0;
char prev_btn_st = 0;
int fader = 0;
char count_up;
uint8_t 		R,G,B;




typedef struct hsv_data{
	uint16_t hue;
	uint8_t sat;
	uint8_t val;
}HSV_DATA;


HSV_DATA running_digi[15] = {
	{510, 255, 180},	//green
	{510, 255,  50},	//white
	{510, 255,  45},	//yellow
	{510, 255,  40},	//orange
	{510, 255,  35},	//light-green
	{510, 255,  30},	//white
	{510, 255,  25},	//white
	{510, 255,  20},	//white
	{510, 255,  15},	//white
	{510, 255,  10},	//white
	{510, 255,   5},	//white
	{510, 255,   5},	//white
	{510, 255,   0},	//white
	{510, 255,   0},	//white
	{510, 255,   0},	//white
};


HSV_DATA color_array[num_led];

HSV_DATA * arrayPtr = color_array;


/**************************** Type Definitions ******************************/

/***************** Macros (Inline Functions) Definitions ********************/

/************************** Variable Definitions ****************************/
// Microblaze peripheral instances
uint64_t 	timestamp = 0L;

PmodOLEDrgb	pmodOLEDrgb_inst;
XIntc 		IntrptCtlrInst;						// Interrupt Controller instance
PmodBT2 myDevice;


/************************** Function Prototypes *****************************/

int	 do_init(void);											// initialize system
void PMDIO_itoa(int32_t value, char *string, int32_t radix);
void PMDIO_puthex(PmodOLEDrgb* InstancePtr, uint32_t num);
void PMDIO_putnum(PmodOLEDrgb* InstancePtr, int32_t num, int32_t radix);
uint16_t HSVtoRGB(uint8_t hue, uint8_t sat, uint8_t val);
void PMOD_Handler(void);										// fixed interval timer interrupt handler
char* output;
char* out;
char* out1;

bool BT2_getLine(PmodBT2* InstancePtr, char* output);
void xmas_twinkle(void);
int pattern[3];

/************************** MAIN PROGRAM ************************************/
int main(void)
{
    uint32_t sts;
    int i,j,k;

    init_platform();
	sts = do_init();
	if (XST_SUCCESS != sts)
	{
		exit(1);
	}

	Xil_ICacheEnable();
	Xil_DCacheEnable();
	output = (char*) malloc(1000);
	microblaze_enable_interrupts();
	clearLEDs(num_led);

	while (1){

		for (i = 0; i<num_led;i++ ){
				SetLEDColor(i, 255,0,0);
			}

		MB_Sleep(DELAY);

			for (i = 0; i<num_led;i++ ){
					SetLEDColor(i, 0,255,0);
				}
			MB_Sleep(DELAY);

			for (i = 0; i<num_led;i++ ){
					SetLEDColor(i, 0,0,255);
				}
			MB_Sleep(DELAY);


	}



	// clear the displays and power down the pmodOLEDrbg
		NX410_SSEG_setAllDigits(SSEGHI, CC_BLANK, CC_E, CC_C, CC_E, DP_NONE);
		NX410_SSEG_setAllDigits(SSEGLO, CC_5, CC_5, CC_8, CC_BLANK, DP_NONE);

	while(1){
		if (BT2_getLine(&myDevice, output)){

			xil_printf("%s",output);

			out1 = strtok(output,",");
				i = 0;
				j = 0;

				while (out1 != NULL){
					k = atoi(out1);
					pattern [j] = k;
					j = j + 1;

					if (j == 3){
						SetLEDColor(i, pattern[0],pattern[1],pattern[2]);
						i = i + 1;
						j = 0;
					}
					if (i == 60 ){
						i = 0;
					}
					out1 = strtok(NULL ,",");
				}

			memset(output,'\0',1000);
}

	}
	xil_printf("out of loop");
	// cleanup and exit
    cleanup_platform();
    exit(0);
}

/**************************** HELPER FUNCTIONS ******************************/

/****************************************************************************/
/**
* initialize the system
*
* This function is executed once at start-up and after resets.  It initializes
* the peripherals and registers the interrupt handler(s)
*****************************************************************************/

int	 do_init(void)
{
	uint32_t status;				// status from Xilinx Lib calls

	// initialize the Nexys4 driver and (some of)the devices
	status = (uint32_t) NX4IO_initialize(NX4IO_BASEADDR);
	if (status != XST_SUCCESS)
	{
		return XST_FAILURE;
	}

	OLEDrgb_begin(&pmodOLEDrgb_inst, RGBDSPLY_GPIO_BASEADDR, RGBDSPLY_SPI_BASEADDR);

	BT2_begin(&myDevice, XPAR_PMODBT2_0_AXI_LITE_GPIO_BASEADDR, XPAR_PMODBT2_0_AXI_LITE_UART_BASEADDR);
	PMODBT2_Reg_SelfTest(&myDevice);

	// initialize the interrupt controller
		status = XIntc_Initialize(&IntrptCtlrInst, INTC_DEVICE_ID);
	    if (status != XST_SUCCESS)
	    {
	       return XST_FAILURE;
	    }
	// connect the fixed interval timer (FIT) handler to the interrupt
		status = XIntc_Connect(&IntrptCtlrInst, INTC_PMODBT2_ID,
							   (XInterruptHandler)PMOD_Handler,
							   (void *)0);
		if (status != XST_SUCCESS)
		{
			return XST_FAILURE;

		}
		// start the interrupt controller such that interrupts are enabled for
		// all devices that cause interrupts.
		status = XIntc_Start(&IntrptCtlrInst, XIN_REAL_MODE);
		if (status != XST_SUCCESS)
		{
			return XST_FAILURE;
		}


		// enable the FIT interrupt
		XIntc_Enable(&IntrptCtlrInst, INTC_PMODBT2_ID);

		enable_LEDs();
		clearLEDs(num_led);



		return XST_SUCCESS;

}

/*********************** DISPLAY-RELATED FUNCTIONS ***********************************/

/****************************************************************************/
/**
* Converts an integer to ASCII characters
*
* algorithm borrowed from ReactOS system libraries
*
* Converts an integer to ASCII in the specified base.  Assumes string[] is
* long enough to hold the result plus the terminating null
*
* @param 	value is the integer to convert
* @param 	*string is a pointer to a buffer large enough to hold the converted number plus
*  			the terminating null
* @param	radix is the base to use in conversion, 
*
* @return  *NONE*
*
* @note
* No size check is done on the return string size.  Make sure you leave room
* for the full string plus the terminating null in string
*****************************************************************************/
void PMDIO_itoa(int32_t value, char *string, int32_t radix)
{
	char tmp[33];
	char *tp = tmp;
	int32_t i;
	uint32_t v;
	int32_t  sign;
	char *sp;


	if (radix > 36 || radix <= 1)
	{
		return;
	}

	sign = ((10 == radix) && (value < 0));
	if (sign)
	{
		v = -value;
	}
	else
	{
		v = (uint32_t) value;
	}
	
  	while (v || tp == tmp)
  	{
		i = v % radix;
		v = v / radix;
		if (i < 10)
		{
			*tp++ = i+'0';
		}
		else
		{
			*tp++ = i + 'a' - 10;
		}
	}
	sp = string;
	
	if (sign)
		*sp++ = '-';

	while (tp > tmp)
		*sp++ = *--tp;
	*sp = 0;
	
  	return;
}


/****************************************************************************/
/**
* Write a 32-bit unsigned hex number to PmodOLEDrgb in Hex
*       
* Writes  32-bit unsigned number to the pmodOLEDrgb display starting at the current
* cursor position.
*
* @param num is the number to display as a hex value
*
* @return  *NONE*
*
* @note
* No size checking is done to make sure the string will fit into a single line,
* or the entire display, for that matter.  Watch your string sizes.
*****************************************************************************/ 
void PMDIO_puthex(PmodOLEDrgb* InstancePtr, uint32_t num)
{
  char  buf[9];
  int32_t   cnt;
  char  *ptr;
  int32_t  digit;
  
  ptr = buf;
  for (cnt = 7; cnt >= 0; cnt--) {
    digit = (num >> (cnt * 4)) & 0xF;
    
    if (digit <= 9)
	{
      *ptr++ = (char) ('0' + digit);
	}
    else
	{
      *ptr++ = (char) ('a' - 10 + digit);
	}
  }

  *ptr = (char) 0;
  OLEDrgb_PutString(InstancePtr,buf);
  
  return;
}


/****************************************************************************/
/**
* Write a 32-bit number in Radix "radix" to LCD display
*
* Writes a 32-bit number to the LCD display starting at the current
* cursor position. "radix" is the base to output the number in.
*
* @param num is the number to display
*
* @param radix is the radix to display number in
*
* @return *NONE*
*
* @note
* No size checking is done to make sure the string will fit into a single line,
* or the entire display, for that matter.  Watch your string sizes.
*****************************************************************************/ 
void PMDIO_putnum(PmodOLEDrgb* InstancePtr, int32_t num, int32_t radix)
{
  char  buf[16];
  
  PMDIO_itoa(num, buf, radix);
  OLEDrgb_PutString(InstancePtr,buf);
  
  return;
}

/**************************** INTERRUPT HANDLERS ******************************/

void PMOD_Handler(void)
{
	//BT2_getLine(&myDevice, &s);
	xil_printf("\nInterrupt called \n\r");


}


void xmas_twinkle(void){
	int i;

	if(!initialized){
		for(i=0; i<num_led; i++){
			arrayPtr->hue = 0;
			arrayPtr->sat = 0;
			arrayPtr->val = 0;
		}

		clearLEDs(num_led);
		initialized = 1;
	}

	for(i=0; i<num_led; i++){
		//led is on
		if(arrayPtr[i].val > 0){
			if(arrayPtr[i].val < 3)
				arrayPtr[i].val = 0;
			else
				arrayPtr[i].val -= 3;
		}

		//led is off
		else if(rand()%300 == 0){
			if(rand()%2 == 0)
				arrayPtr[i].hue = 0;
			else
				arrayPtr[i].hue = 510;

			arrayPtr[i].sat = 255;
			arrayPtr[i].val = 100;
		}
	}

	for(i=0; i<num_led; i++){
		HSVtoRGB(arrayPtr[i].hue, arrayPtr[i].sat, arrayPtr[i].val);
		SetLEDColor(i, R, G, B);
	}

	for(i=0; i<100000; i++);
}

/******************************************************************************/
/***	HSVtoRGB
*
*	Parameters:
*		hue		- Hue of color
*		sat		- Saturation of color
*		val		- Value of color
*
*	Return Value:
*		RGB representation of input color in 16-bit (565) color format
*
*	Errors:
*		none
*
*	Description:
*		Converts an HSV value into a 565 RGB color used by the OLEDrgb
*
*
*******************************************************************************/
uint16_t HSVtoRGB(uint8_t hue, uint8_t sat, uint8_t val)
{
   uint8_t region, remain, p, q, t;
   region = hue/43;
   remain = (hue - (region * 43))*6;
   p = (val * (255-sat))>>8;
   q = (val * (255 - ((sat * remain)>>8)))>>8;
   t = (val * (255 - ((sat * (255 - remain))>>8)))>>8;

   switch(region){
      case 0:
       R = val;
       G = t;
       B = p;
       break;
      case 1:
       R = q;
       G = val;
       B = p;
       break;
      case 2:
       R = p;
       G = val;
       B = t;
       break;
       case 3:
       R = p;
       G = q;
       B = val;
       break;
       case 4:
       R = t;
       G = p;
       B = val;
       break;
       default:
       R = val;
       G = p;
       B = q;
       break;
   }
   return OLEDrgb_BuildRGB(R,G,B);
}

